commit 7cbc824fbc3fb8344f3568f7f17a86ce747fd8bb
Author: andrew <mrju.email@gmail.com>
Date:   Tue Dec 22 07:01:50 2020 +0800

    filemap_fault flow
    
    Signed-off-by: andrew <mrju.email@gmail.com>

diff --git a/mm/filemap.c b/mm/filemap.c
index 85b7d08..4f0ba6a 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -2506,6 +2506,14 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 	pgoff_t max_off;
 	struct page *page;
 	vm_fault_t ret = 0;
+	int foo = 0, i = 0;
+
+	if (!strcmp("foo.txt", file->f_path.dentry->d_name.name)) {
+		foo = !foo;
+		printk("foo-%s-%d: %d name = %s\n",
+				__func__, i++, __LINE__,
+				file->f_path.dentry->d_name.name);
+	}
 
 	max_off = DIV_ROUND_UP(i_size_read(inode), PAGE_SIZE);
 	if (unlikely(offset >= max_off))
@@ -2521,28 +2529,70 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 		 * waiting for the lock.
 		 */
 		fpin = do_async_mmap_readahead(vmf, page);
+		if (foo)
+			printk("foo-%s-%d: %d async file = %px "
+					"fpin = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, fpin, page,
+					PageLocked(page));
 	} else if (!page) {
 		/* No page in the page cache at all */
 		count_vm_event(PGMAJFAULT);
 		count_memcg_event_mm(vmf->vma->vm_mm, PGMAJFAULT);
 		ret = VM_FAULT_MAJOR;
 		fpin = do_sync_mmap_readahead(vmf);
+		if (foo)
+			printk("foo-%s-%d: %d sync file = %px "
+					"fpin = %px page = %px\n",
+					__func__, i++, __LINE__,
+					file, fpin, page);
 retry_find:
 		page = pagecache_get_page(mapping, offset,
 					  FGP_CREAT|FGP_FOR_MMAP,
 					  vmf->gfp_mask);
 		if (!page) {
-			if (fpin)
+			if (fpin) {
+				if (foo)
+					printk("foo-%s-%d: %d sync "
+							"file = %px "
+							"fpin = %px "
+							"page = %px\n",
+							__func__, i++,
+							__LINE__, file,
+							fpin, page);
 				goto out_retry;
+			}
 			return vmf_error(-ENOMEM);
 		}
+
+		if (foo)
+			printk("foo-%s-%d: %d sync file = %px "
+					"fpin = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, fpin, page,
+					PageLocked(page));
 	}
 
-	if (!lock_page_maybe_drop_mmap(vmf, page, &fpin))
+	if (!lock_page_maybe_drop_mmap(vmf, page, &fpin)) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, fpin, page,
+					PageLocked(page));
 		goto out_retry;
+	}
 
 	/* Did it get truncated? */
 	if (unlikely(compound_head(page)->mapping != mapping)) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, page,
+					PageLocked(page));
 		unlock_page(page);
 		put_page(page);
 		goto retry_find;
@@ -2553,8 +2603,15 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 	 * We have a locked page in the page cache, now we need to check
 	 * that it's up-to-date. If not, it is going to be due to an error.
 	 */
-	if (unlikely(!PageUptodate(page)))
+	if (unlikely(!PageUptodate(page))) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, page,
+					PageLocked(page));
 		goto page_not_uptodate;
+	}
 
 	/*
 	 * We've made it this far and we had to drop our mmap_sem, now is the
@@ -2562,6 +2619,12 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 	 * redo the fault.
 	 */
 	if (fpin) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, page,
+					PageLocked(page));
 		unlock_page(page);
 		goto out_retry;
 	}
@@ -2578,6 +2641,15 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 	}
 
 	vmf->page = page;
+
+	if (foo)
+		printk("foo-%s-%d: %d file = %px page = %px "
+				"locked = %d "
+				"ret = %d with VM_FAULT_LOCKED\n",
+				__func__, i++, __LINE__,
+				file, page, PageLocked(page),
+				ret | VM_FAULT_LOCKED);
+
 	return ret | VM_FAULT_LOCKED;
 
 page_not_uptodate:
@@ -2591,16 +2663,33 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 	fpin = maybe_unlock_mmap_for_io(vmf, fpin);
 	error = mapping->a_ops->readpage(file, page);
 	if (!error) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, page, PageLocked(page));
 		wait_on_page_locked(page);
 		if (!PageUptodate(page))
 			error = -EIO;
 	}
-	if (fpin)
+	if (fpin) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, page, PageLocked(page));
 		goto out_retry;
+	}
 	put_page(page);
 
-	if (!error || error == AOP_TRUNCATED_PAGE)
+	if (!error || error == AOP_TRUNCATED_PAGE) {
+		if (foo)
+			printk("foo-%s-%d: %d file = %px page = %px "
+					"locked = %d\n",
+					__func__, i++, __LINE__,
+					file, page, PageLocked(page));
 		goto retry_find;
+	}
 
 	/* Things didn't work out. Return zero to tell the mm layer so. */
 	shrink_readahead_size_eio(file, ra);
@@ -2616,6 +2705,15 @@ vm_fault_t filemap_fault(struct vm_fault *vmf)
 		put_page(page);
 	if (fpin)
 		fput(fpin);
+
+	if (foo)
+		printk("foo-%s-%d: %d file = %px page = %px "
+				"locked = %d "
+				"ret = %d with VM_FAULT_RETRY\n",
+				__func__, i++, __LINE__, file, page,
+				PageLocked(page),
+				ret | VM_FAULT_RETRY);
+
 	return ret | VM_FAULT_RETRY;
 }
 EXPORT_SYMBOL(filemap_fault);
