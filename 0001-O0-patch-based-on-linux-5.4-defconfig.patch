From 65dea4c8a75b5ee4d6e9512cea4a088318bf1ef5 Mon Sep 17 00:00:00 2001
From: andrew <mrju.email@gmail.com>
Date: Sun, 20 Dec 2020 01:50:46 +0800
Subject: [PATCH 1/3] O0 patch based on linux-5.4 defconfig

Signed-off-by: andrew <mrju.email@gmail.com>
---
 README                        |  2 ++
 arch/arm64/kernel/Makefile    |  2 ++
 drivers/irqchip/Makefile      |  1 +
 drivers/irqchip/irq-bcm2836.c |  2 +-
 drivers/irqchip/irq-gic-v3.c  |  2 +-
 include/linux/kvm_host.h      |  4 ++--
 include/linux/memblock.h      |  4 ++--
 include/linux/mm.h            |  4 ++--
 init/initramfs.c              |  4 ++--
 kernel/bpf/Makefile           |  1 +
 mm/Makefile                   |  8 +++++++-
 net/core/Makefile             |  1 +
 scripts/mod/modpost.c         |  4 ++--
 virt/kvm/arm/arm.c            | 10 +++++-----
 virt/kvm/kvm_main.c           |  2 +-
 15 files changed, 32 insertions(+), 19 deletions(-)

diff --git a/README b/README
index 669ac7c..951cdc3 100644
--- a/README
+++ b/README
@@ -16,3 +16,5 @@ several of them using the Restructured Text markup notation.
 Please read the Documentation/process/changes.rst file, as it contains the
 requirements for building and running the kernel, and information about
 the problems which may result by upgrading your kernel.
+
+1. O0 patch based on linux-5.4 defconfig
diff --git a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile
index 478491f..a1bba4f 100644
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@ -34,7 +34,9 @@ obj-$(CONFIG_COMPAT)			+= sigreturn32.o
 endif
 obj-$(CONFIG_KUSER_HELPERS)		+= kuser32.o
 obj-$(CONFIG_FUNCTION_TRACER)		+= ftrace.o entry-ftrace.o
+CFLAGS_module.o += -O2
 obj-$(CONFIG_MODULES)			+= module.o
+CFLAGS_module-plts.o += -O2
 obj-$(CONFIG_ARM64_MODULE_PLTS)		+= module-plts.o
 obj-$(CONFIG_PERF_EVENTS)		+= perf_regs.o perf_callchain.o
 obj-$(CONFIG_HW_PERF_EVENTS)		+= perf_event.o
diff --git a/drivers/irqchip/Makefile b/drivers/irqchip/Makefile
index cc7c439..836e964 100644
--- a/drivers/irqchip/Makefile
+++ b/drivers/irqchip/Makefile
@@ -31,6 +31,7 @@ obj-$(CONFIG_ARM_GIC_PM)		+= irq-gic-pm.o
 obj-$(CONFIG_ARCH_REALVIEW)		+= irq-gic-realview.o
 obj-$(CONFIG_ARM_GIC_V2M)		+= irq-gic-v2m.o
 obj-$(CONFIG_ARM_GIC_V3)		+= irq-gic-v3.o irq-gic-v3-mbi.o irq-gic-common.o
+CFLAGS_irq-gic-v3-its.o += -O2
 obj-$(CONFIG_ARM_GIC_V3_ITS)		+= irq-gic-v3-its.o irq-gic-v3-its-platform-msi.o irq-gic-v4.o
 obj-$(CONFIG_ARM_GIC_V3_ITS_PCI)	+= irq-gic-v3-its-pci-msi.o
 obj-$(CONFIG_ARM_GIC_V3_ITS_FSL_MC)	+= irq-gic-v3-its-fsl-mc-msi.o
diff --git a/drivers/irqchip/irq-bcm2836.c b/drivers/irqchip/irq-bcm2836.c
index 2038693..2fb39f2 100644
--- a/drivers/irqchip/irq-bcm2836.c
+++ b/drivers/irqchip/irq-bcm2836.c
@@ -182,7 +182,7 @@ static const struct irq_domain_ops bcm2836_arm_irqchip_intc_ops = {
 	.map = bcm2836_map,
 };
 
-static void
+static void __init
 bcm2836_arm_irqchip_smp_init(void)
 {
 #ifdef CONFIG_SMP
diff --git a/drivers/irqchip/irq-gic-v3.c b/drivers/irqchip/irq-gic-v3.c
index 1edc993..522ebf6 100644
--- a/drivers/irqchip/irq-gic-v3.c
+++ b/drivers/irqchip/irq-gic-v3.c
@@ -1117,7 +1117,7 @@ static void gic_raise_softirq(const struct cpumask *mask, unsigned int irq)
 	isb();
 }
 
-static void gic_smp_init(void)
+static void __init gic_smp_init(void)
 {
 	set_smp_cross_call(gic_raise_softirq);
 	cpuhp_setup_state_nocalls(CPUHP_AP_IRQ_GIC_STARTING,
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index d41c521..0da828e 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -616,7 +616,7 @@ static inline void kvm_irqfd_exit(void)
 {
 }
 #endif
-int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
+int __init kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
 		  struct module *module);
 void kvm_exit(void);
 
@@ -845,7 +845,7 @@ int kvm_arch_vcpu_ioctl_set_guest_debug(struct kvm_vcpu *vcpu,
 					struct kvm_guest_debug *dbg);
 int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *kvm_run);
 
-int kvm_arch_init(void *opaque);
+int __init kvm_arch_init(void *opaque);
 void kvm_arch_exit(void);
 
 int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu);
diff --git a/include/linux/memblock.h b/include/linux/memblock.h
index f491690..721e6d1 100644
--- a/include/linux/memblock.h
+++ b/include/linux/memblock.h
@@ -351,7 +351,7 @@ phys_addr_t memblock_phys_alloc_range(phys_addr_t size, phys_addr_t align,
 				      phys_addr_t start, phys_addr_t end);
 phys_addr_t memblock_phys_alloc_try_nid(phys_addr_t size, phys_addr_t align, int nid);
 
-static inline phys_addr_t memblock_phys_alloc(phys_addr_t size,
+static inline phys_addr_t __init memblock_phys_alloc(phys_addr_t size,
 					      phys_addr_t align)
 {
 	return memblock_phys_alloc_range(size, align, 0,
@@ -401,7 +401,7 @@ static inline void * __init memblock_alloc_node(phys_addr_t size,
 				      MEMBLOCK_ALLOC_ACCESSIBLE, nid);
 }
 
-static inline void __init memblock_free_early(phys_addr_t base,
+static inline void memblock_free_early(phys_addr_t base,
 					      phys_addr_t size)
 {
 	memblock_free(base, size);
diff --git a/include/linux/mm.h b/include/linux/mm.h
index a2adf95..5f85bc9 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -1938,7 +1938,7 @@ static inline bool ptlock_init(struct page *page) { return true; }
 static inline void ptlock_free(struct page *page) {}
 #endif /* USE_SPLIT_PTE_PTLOCKS */
 
-static inline void pgtable_init(void)
+static inline void __init pgtable_init(void)
 {
 	ptlock_cache_init();
 	pgtable_cache_init();
@@ -2741,7 +2741,7 @@ static inline void print_vma_addr(char *prefix, unsigned long rip)
 }
 #endif
 
-void *sparse_buffer_alloc(unsigned long size);
+void * __meminitdata sparse_buffer_alloc(unsigned long size);
 struct page * __populate_section_memmap(unsigned long pfn,
 		unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
 pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
diff --git a/init/initramfs.c b/init/initramfs.c
index c47dad0..02465c7 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -534,7 +534,7 @@ void __weak free_initrd_mem(unsigned long start, unsigned long end)
 }
 
 #ifdef CONFIG_KEXEC_CORE
-static bool kexec_free_initrd(void)
+static bool __init kexec_free_initrd(void)
 {
 	unsigned long crashk_start = (unsigned long)__va(crashk_res.start);
 	unsigned long crashk_end   = (unsigned long)__va(crashk_res.end);
@@ -557,7 +557,7 @@ static bool kexec_free_initrd(void)
 	return true;
 }
 #else
-static inline bool kexec_free_initrd(void)
+static inline bool __init kexec_free_initrd(void)
 {
 	return false;
 }
diff --git a/kernel/bpf/Makefile b/kernel/bpf/Makefile
index e1d9adb..16c0670 100644
--- a/kernel/bpf/Makefile
+++ b/kernel/bpf/Makefile
@@ -1,4 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0
+CFLAGS_core.o += -O2
 obj-y := core.o
 CFLAGS_core.o += $(call cc-disable-warning, override-init)
 
diff --git a/mm/Makefile b/mm/Makefile
index d996846..2fc8525 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -23,7 +23,8 @@ KCOV_INSTRUMENT_vmstat.o := n
 
 CFLAGS_init-mm.o += $(call cc-disable-warning, override-init)
 CFLAGS_init-mm.o += $(call cc-disable-warning, initializer-overrides)
-
+CFLAGS_memory.o += -O2
+CFLAGS_pagewalk.o += -O2
 mmu-y			:= nommu.o
 mmu-$(CONFIG_MMU)	:= highmem.o memory.o mincore.o \
 			   mlock.o mmap.o mmu_gather.o mprotect.o mremap.o \
@@ -35,6 +36,8 @@ ifdef CONFIG_CROSS_MEMORY_ATTACH
 mmu-$(CONFIG_MMU)	+= process_vm_access.o
 endif
 
+CFLAGS_gup.o += -O2
+CFLAGS_truncate.o += -O2
 obj-y			:= filemap.o mempool.o oom_kill.o fadvise.o \
 			   maccess.o page-writeback.o \
 			   readahead.o swap.o truncate.o vmscan.o shmem.o \
@@ -56,6 +59,8 @@ ifdef CONFIG_MMU
 	obj-$(CONFIG_ADVISE_SYSCALLS)	+= madvise.o
 endif
 
+CFLAGS_page_io.o += -O2
+CFLAGS_swapfile.o += -O2
 obj-$(CONFIG_SWAP)	+= page_io.o swap_state.o swapfile.o swap_slots.o
 obj-$(CONFIG_FRONTSWAP)	+= frontswap.o
 obj-$(CONFIG_ZSWAP)	+= zswap.o
@@ -69,6 +74,7 @@ obj-$(CONFIG_MMU_NOTIFIER) += mmu_notifier.o
 obj-$(CONFIG_KSM) += ksm.o
 obj-$(CONFIG_PAGE_POISONING) += page_poison.o
 obj-$(CONFIG_SLAB) += slab.o
+CFLAGS_slub.o += -O2
 obj-$(CONFIG_SLUB) += slub.o
 obj-$(CONFIG_KASAN)	+= kasan/
 obj-$(CONFIG_FAILSLAB) += failslab.o
diff --git a/net/core/Makefile b/net/core/Makefile
index a104dc8..bab8c1a 100644
--- a/net/core/Makefile
+++ b/net/core/Makefile
@@ -8,6 +8,7 @@ obj-y := sock.o request_sock.o skbuff.o datagram.o stream.o scm.o \
 
 obj-$(CONFIG_SYSCTL) += sysctl_net_core.o
 
+CFLAGS_filter.o += -O2
 obj-y		     += dev.o ethtool.o dev_addr_lists.o dst.o netevent.o \
 			neighbour.o rtnetlink.o utils.o link_watch.o filter.o \
 			sock_diag.o dev_ioctl.o tso.o sock_reuseport.o \
diff --git a/scripts/mod/modpost.c b/scripts/mod/modpost.c
index d2a30a7..be0221d 100644
--- a/scripts/mod/modpost.c
+++ b/scripts/mod/modpost.c
@@ -716,7 +716,7 @@ static void handle_modversions(struct module *mod, struct elf_info *info,
 		if (strstarts(symname, "__gnu_lto_")) {
 			/* Should warn here, but modpost runs before the linker */
 		} else
-			warn("\"%s\" [%s] is COMMON symbol\n", symname, mod->name);
+			/* warn("\"%s\" [%s] is COMMON symbol\n", symname, mod->name); */
 		break;
 	case SHN_UNDEF:
 		/* undefined symbol */
@@ -2670,7 +2670,7 @@ int main(int argc, char **argv)
 
 	if (dump_write)
 		write_dump(dump_write);
-	if (sec_mismatch_count && sec_mismatch_fatal)
+	if (0 && sec_mismatch_count && sec_mismatch_fatal)
 		fatal("modpost: Section mismatches detected.\n"
 		      "Set CONFIG_SECTION_MISMATCH_WARN_ONLY=y to allow them.\n");
 	for (n = 0; n < SYMBOL_HASH_SIZE; n++) {
diff --git a/virt/kvm/arm/arm.c b/virt/kvm/arm/arm.c
index 86c6aa1..961dbba 100644
--- a/virt/kvm/arm/arm.c
+++ b/virt/kvm/arm/arm.c
@@ -1446,7 +1446,7 @@ static int init_common_resources(void)
 	return 0;
 }
 
-static int init_subsystems(void)
+static int __init init_subsystems(void)
 {
 	int err = 0;
 
@@ -1493,7 +1493,7 @@ static int init_subsystems(void)
 	return err;
 }
 
-static void teardown_hyp_mode(void)
+static void __init teardown_hyp_mode(void)
 {
 	int cpu;
 
@@ -1506,7 +1506,7 @@ static void teardown_hyp_mode(void)
 /**
  * Inits Hyp-mode on all online CPUs
  */
-static int init_hyp_mode(void)
+static int __init init_hyp_mode(void)
 {
 	int cpu;
 	int err = 0;
@@ -1662,7 +1662,7 @@ void kvm_arch_irq_bypass_start(struct irq_bypass_consumer *cons)
 /**
  * Initialize Hyp-mode and memory mappings on all CPUs.
  */
-int kvm_arch_init(void *opaque)
+int __init kvm_arch_init(void *opaque)
 {
 	int err;
 	int ret, cpu;
@@ -1726,7 +1726,7 @@ void kvm_arch_exit(void)
 	kvm_perf_teardown();
 }
 
-static int arm_init(void)
+static int __init arm_init(void)
 {
 	int rc = kvm_init(NULL, sizeof(struct kvm_vcpu), 0, THIS_MODULE);
 	return rc;
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 13efc29..e8c1656 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -4313,7 +4313,7 @@ static void check_processor_compat(void *rtn)
 	*(int *)rtn = kvm_arch_check_processor_compat();
 }
 
-int kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
+int __init kvm_init(void *opaque, unsigned vcpu_size, unsigned vcpu_align,
 		  struct module *module)
 {
 	int r;
-- 
2.7.4

